import React, { useState, useRef } from 'react';
import { Link } from 'react-router-dom';

const VoiceGenerator = () => {
  const [userInput, setUserInput] = useState('');
  const [selectedVoice, setSelectedVoice] = useState(null);
  const [generatedMessage, setGeneratedMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [speaking, setSpeaking] = useState(false);
  
  // New state variables for modern features
  const [inputMode, setInputMode] = useState('typing'); // 'typing', 'voice', 'chat'
  const [isRecording, setIsRecording] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);

  const synth = useRef(window.speechSynthesis);

  const voices = [
    { id: 'gordon-ramsay', name: 'Gordon Ramsay', description: 'Harsh kitchen reality' },
    { id: 'simon-cowell', name: 'Simon Cowell', description: 'Brutal talent judge' },
    { id: 'drill-sergeant', name: 'Drill Sergeant', description: 'Military motivation killer' },
    { id: 'disappointed-parent', name: 'Disappointed Parent', description: 'Ultimate guilt trip' },
    { id: 'existential-philosopher', name: 'Nihilistic Philosopher', description: 'Questions everything' },
    { id: 'sarcastic-teenager', name: 'Sarcastic Teenager', description: 'Eye-rolling expert' },
    { id: 'corporate-boss', name: 'Corporate Boss', description: 'Dream crusher extraordinaire' },
    { id: 'reality-tv-host', name: 'Reality TV Host', description: 'Eliminates hope efficiently' }
  ];

  // Demotivator styles / dropdown
  const demotivatorModes = [
    { id: 'mild', label: 'Mild Roast' },
    { id: 'sarcastic', label: 'Sarcastic' },
    { id: 'brutal', label: 'Brutal' },
    { id: 'nihilist', label: 'Nihilist' },
    { id: 'absurd', label: 'Absurdist' }
  ];

  const [selectedMode, setSelectedMode] = useState(demotivatorModes[2].id);
  const [intensity, setIntensity] = useState(70);
  const [savedMessages, setSavedMessages] = useState([]);

  const generateMessage = async () => {
    if (!userInput.trim() || !selectedVoice) {
      setError('Please enter a message and select a voice');
      return;
    }

    setLoading(true);
    setError('');
    
    try {
    const response = await fetch('http://localhost:5000/api/generate-demotivation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userInput: userInput.trim(),
      voiceStyle: selectedVoice.id,
      style: selectedMode,
      intensity: intensity
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate demotivation message');
      }

      const data = await response.json();
      setGeneratedMessage(data.message);
      // add to saved/history for replay/share
      setSavedMessages(prev => [{ id: Date.now(), text: data.message, mode: selectedMode, intensity }, ...prev].slice(0, 50));
    } catch (err) {
      setError(err.message || 'An error occurred while generating the message');
    } finally {
      setLoading(false);
    }
  };

  const applySamplePrompt = (prompt) => {
    setUserInput(prompt);
  };

  const useSavedMessage = (msg) => {
    setUserInput(msg.text);
    setGeneratedMessage(msg.text);
  };

  const copyText = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      // small non-blocking feedback
      // using alert keeps this simple for now
      alert('Copied to clipboard');
    } catch (e) {
      console.error('copy failed', e);
    }
  };

  const speakMessage = () => {
    if (!generatedMessage || speaking) return;
    
    setSpeaking(true);
    
    // Cancel any ongoing speech
    synth.current.cancel();
    
    const utterance = new SpeechSynthesisUtterance(generatedMessage);
    utterance.rate = 0.9;
    utterance.pitch = 0.8;
    utterance.volume = 1.0;
    
    // Try to find a suitable voice
    const availableVoices = synth.current.getVoices();
    if (availableVoices.length > 0) {
      // Prefer English voices
      const englishVoice = availableVoices.find(voice => 
        voice.lang.startsWith('en') && voice.name.toLowerCase().includes('male')
      ) || availableVoices.find(voice => voice.lang.startsWith('en'));
      
      if (englishVoice) {
        utterance.voice = englishVoice;
      }
    }
    
    utterance.onend = () => setSpeaking(false);
    utterance.onerror = () => setSpeaking(false);
    
    synth.current.speak(utterance);
  };

  const shareMessage = () => {
    if (navigator.share && generatedMessage) {
      navigator.share({
        title: 'Voice Demotivation',
        text: `"${generatedMessage}" - Generated by Demotivation Station`,
        url: window.location.href
      });
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(`"${generatedMessage}" - Generated by Demotivation Station`);
      alert('Message copied to clipboard!');
    }
  };

  // Voice input functionality
  const startVoiceInput = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      setError('Voice input not supported in your browser');
      return;
    }

    setIsRecording(true);
    setError('');

    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'en-US';

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      setUserInput(prev => prev + (prev ? ' ' : '') + transcript);
      setIsRecording(false);
    };

    recognition.onerror = (event) => {
      setError('Voice input error: ' + event.error);
      setIsRecording(false);
    };

    recognition.onend = () => {
      setIsRecording(false);
    };

    recognition.start();
  };

  // Chat functionality
  const sendChatMessage = (message) => {
    if (!message.trim()) return;
    
    const newMessage = {
      id: Date.now(),
      text: message,
      sender: 'user',
      timestamp: new Date()
    };
    
    setChatHistory(prev => [...prev, newMessage]);
    
    // Auto-generate demotivation response
    setTimeout(() => {
      const responses = [
        "Let me crush that dream for you...",
        "Oh, another unrealistic goal? Interesting.",
        "I see delusion is strong with this one.",
        "Reality check incoming...",
        "Time to lower those expectations."
      ];
      
      const botResponse = {
        id: Date.now() + 1,
        text: responses[Math.floor(Math.random() * responses.length)],
        sender: 'bot',
        timestamp: new Date()
      };
      setChatHistory(prev => [...prev, botResponse]);
      
      // Set the message for voice generation
      setUserInput(message);
    }, 1500);
  };

  const clearChat = () => {
    setChatHistory([]);
  };

  const randomVoice = () => {
    const randomIndex = Math.floor(Math.random() * voices.length);
    setSelectedVoice(voices[randomIndex]);
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%)',
      fontFamily: 'Arial, sans-serif',
      padding: '0',
      margin: '0'
    }}>
      {/* Header */}
      <div style={{
        background: 'white',
        boxShadow: '0 2px 20px rgba(0,0,0,0.08)',
        padding: '20px 0',
        borderBottom: '1px solid #e1e5e9'
      }}>
        <div style={{
          maxWidth: '1200px',
          margin: '0 auto',
          padding: '0 20px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
        }}>
          <Link to="/" style={{
            fontSize: '24px',
            fontWeight: '700',
            color: '#2c3e50',
            textDecoration: 'none',
            letterSpacing: '-0.5px'
          }}>
            Demotivation Station
          </Link>
          <nav style={{ display: 'flex', gap: '30px', alignItems: 'center' }}>
            <Link to="/" style={{
              color: '#6c757d',
              textDecoration: 'none',
              fontWeight: '500',
              transition: 'color 0.3s ease'
            }}>
              Home
            </Link>
            <Link to="/generator" style={{
              color: '#6c757d',
              textDecoration: 'none',
              fontWeight: '500',
              transition: 'color 0.3s ease'
            }}>
              Text Generator
            </Link>
            <Link to="/voice-generator" style={{
              color: '#dc3545',
              textDecoration: 'none',
              fontWeight: '600',
              borderBottom: '2px solid #dc3545'
            }}>
              Voice Generator
            </Link>
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div style={{
        maxWidth: '1200px',
        margin: '0 auto',
        padding: '40px 20px'
      }}>
        {/* Page Title */}
        <div style={{ textAlign: 'center', marginBottom: '50px' }}>
          <h1 style={{
            fontSize: '42px',
            fontWeight: '800',
            color: '#2c3e50',
            marginBottom: '15px',
            letterSpacing: '-1px'
          }}>
            Voice Demotivation Studio
          </h1>
          <p style={{
            fontSize: '18px',
            color: '#6c757d',
            maxWidth: '600px',
            margin: '0 auto',
            lineHeight: '1.6'
          }}>
            Transform your thoughts into crushing reality checks with AI-powered celebrity voices
          </p>
        </div>

  {/* Input Mode Toggle */}
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          marginBottom: '40px'
        }}>
          <div style={{
            background: 'white',
            borderRadius: '12px',
            padding: '6px',
            boxShadow: '0 4px 20px rgba(0,0,0,0.08)',
            display: 'flex',
            gap: '4px'
          }}>
            {['typing', 'voice', 'chat'].map((mode) => (
              <button
                key={mode}
                onClick={() => setInputMode(mode)}
                style={{
                  padding: '12px 24px',
                  border: 'none',
                  borderRadius: '8px',
                  background: inputMode === mode ? '#dc3545' : 'transparent',
                  color: inputMode === mode ? 'white' : '#6c757d',
                  fontWeight: '600',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  textTransform: 'capitalize',
                  fontSize: '14px'
                }}
              >
                {mode === 'typing' && '✍️ Type'}
                {mode === 'voice' && '🎤 Voice'}
                {mode === 'chat' && '💬 Chat'}
              </button>
            ))}
          </div>
        </div>

        {/* Content Grid */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: inputMode === 'chat' ? '1fr 1fr' : '2fr 1fr',
          gap: '30px',
          marginBottom: '40px'
        }}>
          
          {/* Chat History (only visible in chat mode) */}
          {inputMode === 'chat' && (
            <div style={{
              background: 'white',
              borderRadius: '16px',
              boxShadow: '0 8px 32px rgba(0,0,0,0.08)',
              overflow: 'hidden'
            }}>
              <div style={{
                padding: '20px',
                borderBottom: '1px solid #e1e5e9',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <h3 style={{
                  margin: '0',
                  color: '#2c3e50',
                  fontSize: '18px',
                  fontWeight: '600'
                }}>
                  Chat History
                </h3>
                <button
                  onClick={clearChat}
                  style={{
                    background: 'none',
                    border: '1px solid #e1e5e9',
                    borderRadius: '6px',
                    padding: '6px 12px',
                    color: '#6c757d',
                    cursor: 'pointer',
                    fontSize: '12px'
                  }}
                >
                  Clear
                </button>
              </div>
              <div style={{
                height: '400px',
                overflowY: 'auto',
                padding: '20px'
              }}>
                {chatHistory.length === 0 ? (
                  <div style={{
                    textAlign: 'center',
                    color: '#6c757d',
                    marginTop: '100px'
                  }}>
                    Start a conversation to see your chat history
                  </div>
                ) : (
                  chatHistory.map(msg => (
                    <div
                      key={msg.id}
                      style={{
                        marginBottom: '15px',
                        display: 'flex',
                        justifyContent: msg.sender === 'user' ? 'flex-end' : 'flex-start'
                      }}
                    >
                      <div style={{
                        maxWidth: '70%',
                        padding: '12px 16px',
                        borderRadius: msg.sender === 'user' ? '16px 16px 4px 16px' : '16px 16px 16px 4px',
                        background: msg.sender === 'user' ? '#dc3545' : '#f8f9fa',
                        color: msg.sender === 'user' ? 'white' : '#2c3e50'
                      }}>
                        {msg.text}
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          )}

          {/* Main Input Panel */}
          <div style={{
            background: 'white',
            borderRadius: '16px',
            boxShadow: '0 8px 32px rgba(0,0,0,0.08)',
            padding: '30px'
          }}>
            {/* Input Section */}
            {inputMode === 'typing' && (
              <div style={{ marginBottom: '25px' }}>
                <label style={{
                  display: 'block',
                  marginBottom: '12px',
                  color: '#2c3e50',
                  fontWeight: '600',
                  fontSize: '16px'
                }}>
                  Enter your message
                </label>
                <textarea
                  value={userInput}
                  onChange={(e) => setUserInput(e.target.value)}
                  placeholder="Type something optimistic that needs crushing..."
                  style={{
                    width: '100%',
                    minHeight: '120px',
                    padding: '16px',
                    border: '2px solid #e1e5e9',
                    borderRadius: '12px',
                    fontSize: '16px',
                    fontFamily: 'inherit',
                    resize: 'vertical',
                    outline: 'none',
                    transition: 'border-color 0.3s ease',
                    backgroundColor: '#f8f9fa'
                  }}
                  onFocus={(e) => e.target.style.borderColor = '#dc3545'}
                  onBlur={(e) => e.target.style.borderColor = '#e1e5e9'}
                />
              </div>
            )}

            {inputMode === 'voice' && (
              <div style={{ marginBottom: '25px', textAlign: 'center' }}>
                <div style={{
                  background: isRecording ? '#ffe6e6' : '#f8f9fa',
                  border: `2px solid ${isRecording ? '#dc3545' : '#e1e5e9'}`,
                  borderRadius: '12px',
                  padding: '40px',
                  marginBottom: '20px'
                }}>
                  <div style={{
                    fontSize: '48px',
                    marginBottom: '20px',
                    color: isRecording ? '#dc3545' : '#6c757d'
                  }}>
                    🎤
                  </div>
                  <p style={{
                    color: isRecording ? '#dc3545' : '#6c757d',
                    fontSize: '16px',
                    margin: '0 0 20px 0'
                  }}>
                    {isRecording ? 'Listening... Speak your delusions' : 'Click to start voice input'}
                  </p>
                  <button
                    onClick={startVoiceInput}
                    disabled={isRecording}
                    style={{
                      background: isRecording ? '#6c757d' : '#dc3545',
                      color: 'white',
                      border: 'none',
                      borderRadius: '25px',
                      padding: '12px 24px',
                      fontSize: '16px',
                      fontWeight: '600',
                      cursor: isRecording ? 'not-allowed' : 'pointer',
                      transition: 'all 0.3s ease'
                    }}
                  >
                    {isRecording ? 'Recording...' : 'Start Recording'}
                  </button>
                </div>
                {userInput && (
                  <div style={{
                    background: '#f8f9fa',
                    border: '1px solid #e1e5e9',
                    borderRadius: '8px',
                    padding: '16px',
                    textAlign: 'left'
                  }}>
                    <strong>Transcribed:</strong> {userInput}
                  </div>
                )}
              </div>
            )}

            {inputMode === 'chat' && (
              <div style={{ marginBottom: '25px' }}>
                <div style={{
                  display: 'flex',
                  gap: '12px'
                }}>
                  <input
                    type="text"
                    value={userInput}
                    onChange={(e) => setUserInput(e.target.value)}
                    placeholder="Type your message..."
                    style={{
                      flex: '1',
                      padding: '12px 16px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '25px',
                      fontSize: '16px',
                      outline: 'none',
                      transition: 'border-color 0.3s ease'
                    }}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        sendChatMessage(userInput);
                        setUserInput('');
                      }
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#dc3545'}
                    onBlur={(e) => e.target.style.borderColor = '#e1e5e9'}
                  />
                  <button
                    onClick={() => {
                      sendChatMessage(userInput);
                      setUserInput('');
                    }}
                    style={{
                      background: '#dc3545',
                      color: 'white',
                      border: 'none',
                      borderRadius: '50%',
                      width: '48px',
                      height: '48px',
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '18px'
                    }}
                  >
                    ➤
                  </button>
                </div>
              </div>
            )}

            {/* Voice Selection */}
            <div style={{ marginBottom: '25px' }}>
              <label style={{
                display: 'block',
                marginBottom: '12px',
                color: '#2c3e50',
                fontWeight: '600',
                fontSize: '16px'
              }}>
                Choose your demotivator
              </label>

              {/* Demotivator style dropdown + intensity */}
              <div style={{ display: 'flex', gap: '12px', marginBottom: '12px', alignItems: 'center' }}>
                <select
                  value={selectedMode}
                  onChange={(e) => setSelectedMode(e.target.value)}
                  style={{ padding: '10px 12px', borderRadius: '8px', border: '1px solid #e1e5e9', background: 'white', cursor: 'pointer' }}
                >
                  {demotivatorModes.map(m => (
                    <option key={m.id} value={m.id}>{m.label}</option>
                  ))}
                </select>

                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <label style={{ fontSize: '13px', color: '#6c757d' }}>Intensity</label>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    value={intensity}
                    onChange={(e) => setIntensity(Number(e.target.value))}
                    style={{ cursor: 'pointer' }}
                  />
                  <div style={{ minWidth: '36px', textAlign: 'right', color: '#6c757d', fontWeight: '600' }}>{intensity}</div>
                </div>
              </div>

              <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                gap: '12px'
              }}>
                {voices.map((voice, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedVoice(voice)}
                    style={{
                      padding: '16px',
                      border: selectedVoice?.name === voice.name ? '2px solid #dc3545' : '2px solid #e1e5e9',
                      borderRadius: '12px',
                      background: selectedVoice?.name === voice.name ? '#ffe6e6' : 'white',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      textAlign: 'left'
                    }}
                  >
                    <div style={{
                      fontWeight: '600',
                      color: selectedVoice?.name === voice.name ? '#dc3545' : '#2c3e50',
                      marginBottom: '4px'
                    }}>
                      {voice.name}
                    </div>
                    <div style={{
                      fontSize: '12px',
                      color: '#6c757d'
                    }}>
                      {voice.description}
                    </div>
                  </button>
                ))}
              </div>
              <button
                onClick={randomVoice}
                style={{
                  marginTop: '12px',
                  background: 'none',
                  border: '2px dashed #dc3545',
                  borderRadius: '8px',
                  padding: '12px',
                  color: '#dc3545',
                  cursor: 'pointer',
                  width: '100%',
                  fontWeight: '600'
                }}
              >
                🎲 Surprise me with a random voice
              </button>
            </div>

            {/* Generate Button */}
            <button
              onClick={generateMessage}
              disabled={loading || !userInput.trim() || !selectedVoice}
              style={{
                width: '100%',
                padding: '16px',
                background: loading ? '#6c757d' : 'linear-gradient(135deg, #dc3545 0%, #c82333 100%)',
                color: 'white',
                border: 'none',
                borderRadius: '12px',
                fontSize: '18px',
                fontWeight: '700',
                cursor: loading ? 'not-allowed' : 'pointer',
                transition: 'all 0.3s ease',
                boxShadow: '0 4px 20px rgba(220, 53, 69, 0.3)',
                marginBottom: '20px'
              }}
            >
              {loading ? 'Crushing your dreams...' : '💀 Generate Demotivation'}
            </button>

            {/* Small help / inspiration */}
            <div style={{ marginBottom: '18px', color: '#6c757d', fontSize: '13px' }}>
              Need ideas? Click a sample prompt from the right sidebar or pick a style above.
            </div>

            {/* Error Display */}
            {error && (
              <div style={{
                background: '#f8d7da',
                border: '1px solid #f5c6cb',
                color: '#721c24',
                padding: '16px',
                borderRadius: '8px',
                marginBottom: '20px'
              }}>
                {error}
              </div>
            )}

            {/* Generated Message Display */}
            {generatedMessage && (
              <div style={{
                background: 'linear-gradient(135deg, #ffe6e6 0%, #fff5f5 100%)',
                border: '2px solid #dc3545',
                borderRadius: '12px',
                padding: '25px',
                marginBottom: '20px'
              }}>
                <h3 style={{
                  color: '#dc3545',
                  marginBottom: '15px',
                  fontSize: '18px',
                  fontWeight: '700'
                }}>
                  Your Demotivation Message:
                </h3>
                <p style={{
                  fontSize: '16px',
                  lineHeight: '1.6',
                  color: '#2c3e50',
                  fontStyle: 'italic',
                  marginBottom: '20px'
                }}>
                  "{generatedMessage}"
                </p>
                <div style={{
                  display: 'flex',
                  gap: '12px',
                  flexWrap: 'wrap'
                }}>
                  <button
                    onClick={speakMessage}
                    disabled={speaking}
                    style={{
                      background: speaking ? '#6c757d' : '#28a745',
                      color: 'white',
                      border: 'none',
                      borderRadius: '8px',
                      padding: '10px 16px',
                      cursor: speaking ? 'not-allowed' : 'pointer',
                      fontSize: '14px',
                      fontWeight: '600'
                    }}
                  >
                    {speaking ? '🔊 Speaking...' : '🔊 Play Voice'}
                  </button>
                  <button
                    onClick={shareMessage}
                    style={{
                      background: '#17a2b8',
                      color: 'white',
                      border: 'none',
                      borderRadius: '8px',
                      padding: '10px 16px',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: '600'
                    }}
                  >
                    📤 Share
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Right Sidebar: Inspiration & History */}
          <div style={{
            borderRadius: '12px',
            padding: '18px',
            background: '#ffffff',
            boxShadow: '0 8px 24px rgba(0,0,0,0.06)'
          }}>
            <h4 style={{ marginTop: 0, marginBottom: '12px', color: '#2c3e50' }}>Inspiration</h4>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px', marginBottom: '16px' }}>
              {[
                'I finally finished my project and it was...',
                "I have a brilliant startup idea that will...",
                'My partner said I am the best because...',
                'I am going to apply for that dream job because...'
              ].map((p, i) => (
                <button key={i} onClick={() => applySamplePrompt(p)} style={{ padding: '8px 10px', borderRadius: '999px', border: '1px solid #e6e6e6', background: '#f8f9fa', cursor: 'pointer', fontSize: '13px' }}>{p.length > 40 ? p.slice(0, 40) + '…' : p}</button>
              ))}
            </div>

            <h4 style={{ marginTop: 0, marginBottom: '12px', color: '#2c3e50' }}>History</h4>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px', maxHeight: '420px', overflowY: 'auto' }}>
              {savedMessages.length === 0 ? (
                <div style={{ color: '#6c757d', fontSize: '13px' }}>No generated messages yet — create one to save it here.</div>
              ) : (
                savedMessages.map(msg => (
                  <div key={msg.id} style={{ border: '1px solid #f0f0f0', padding: '10px', borderRadius: '8px', background: '#fff' }}>
                    <div style={{ fontSize: '13px', color: '#2c3e50', marginBottom: '6px' }}>{msg.text.length > 120 ? msg.text.slice(0, 120) + '…' : msg.text}</div>
                    <div style={{ display: 'flex', gap: '8px' }}>
                      <button onClick={() => useSavedMessage(msg)} style={{ padding: '6px 10px', background: '#dc3545', color: 'white', border: 'none', borderRadius: '6px', cursor: 'pointer' }}>Use</button>
                      <button onClick={() => copyText(msg.text)} style={{ padding: '6px 10px', background: '#f1f1f1', border: 'none', borderRadius: '6px', cursor: 'pointer' }}>Copy</button>
                      <button onClick={() => { setSavedMessages(prev => prev.filter(m => m.id !== msg.id)); }} style={{ padding: '6px 10px', background: '#fff7f8', border: '1px solid #fdecea', color: '#dc3545', borderRadius: '6px', cursor: 'pointer' }}>Delete</button>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VoiceGenerator;
