import React, { useState, useRef } from 'react';
import { Link } from 'react-router-dom';

const VoiceGenerator = () => {
  const [userInput, setUserInput] = useState('');
  const [selectedVoice, setSelectedVoice] = useState(null);
  const [generatedMessage, setGeneratedMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [speaking, setSpeaking] = useState(false);
  
  // New state variables for modern features
  const [inputMode, setInputMode] = useState('typing'); // 'typing', 'voice', 'chat'
  const [isRecording, setIsRecording] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);

  const synth = useRef(window.speechSynthesis);

  const voices = [
    { id: 'gordon-ramsay', name: 'Gordon Ramsay', description: 'Harsh kitchen reality' },
    { id: 'simon-cowell', name: 'Simon Cowell', description: 'Brutal talent judge' },
    { id: 'drill-sergeant', name: 'Drill Sergeant', description: 'Military motivation killer' },
    { id: 'disappointed-parent', name: 'Disappointed Parent', description: 'Ultimate guilt trip' },
    { id: 'existential-philosopher', name: 'Nihilistic Philosopher', description: 'Questions everything' },
    { id: 'sarcastic-teenager', name: 'Sarcastic Teenager', description: 'Eye-rolling expert' },
    { id: 'corporate-boss', name: 'Corporate Boss', description: 'Dream crusher extraordinaire' },
    { id: 'reality-tv-host', name: 'Reality TV Host', description: 'Eliminates hope efficiently' }
  ];

  const generateMessage = async () => {
    if (!userInput.trim() || !selectedVoice) {
      setError('Please enter a message and select a voice');
      return;
    }

    setLoading(true);
    setError('');
    
    try {
      const response = await fetch('http://localhost:5000/api/generate-demotivation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userInput: userInput.trim(),
          voiceStyle: selectedVoice.id
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate demotivation message');
      }

      const data = await response.json();
      setGeneratedMessage(data.message);
    } catch (err) {
      setError(err.message || 'An error occurred while generating the message');
    } finally {
      setLoading(false);
    }
  };

  const speakMessage = () => {
    if (!generatedMessage || speaking) return;
    
    setSpeaking(true);
    
    // Cancel any ongoing speech
    synth.current.cancel();
    
    const utterance = new SpeechSynthesisUtterance(generatedMessage);
    utterance.rate = 0.9;
    utterance.pitch = 0.8;
    utterance.volume = 1.0;
    
    // Try to find a suitable voice
    const availableVoices = synth.current.getVoices();
    if (availableVoices.length > 0) {
      // Prefer English voices
      const englishVoice = availableVoices.find(voice => 
        voice.lang.startsWith('en') && voice.name.toLowerCase().includes('male')
      ) || availableVoices.find(voice => voice.lang.startsWith('en'));
      
      if (englishVoice) {
        utterance.voice = englishVoice;
      }
    }
    
    utterance.onend = () => setSpeaking(false);
    utterance.onerror = () => setSpeaking(false);
    
    synth.current.speak(utterance);
  };

  const shareMessage = () => {
    if (navigator.share && generatedMessage) {
      navigator.share({
        title: 'Voice Demotivation',
        text: `"${generatedMessage}" - Generated by BrutualHQ`,
        url: window.location.href
      });
    } else {
      // Fallback: copy to clipboard
  navigator.clipboard.writeText(`"${generatedMessage}" - Generated by BrutualHQ`);
  alert('Message copied to clipboard!');
    }
  };

  // Voice input functionality
  const startVoiceInput = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      setError('Voice input not supported in your browser');
      return;
    }

    setIsRecording(true);
    setError('');

    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'en-US';

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      setUserInput(prev => prev + (prev ? ' ' : '') + transcript);
      setIsRecording(false);
    };

    recognition.onerror = (event) => {
      setError('Voice input error: ' + event.error);
      setIsRecording(false);
    };

    recognition.onend = () => {
      setIsRecording(false);
    };

    recognition.start();
  };

  // Chat functionality
  const sendChatMessage = (message) => {
    if (!message.trim()) return;
    
    const newMessage = {
      id: Date.now(),
      text: message,
      sender: 'user',
      timestamp: new Date()
    };
    
    setChatHistory(prev => [...prev, newMessage]);
    
    // Auto-generate demotivation response
    setTimeout(() => {
      const responses = [
        "Let me crush that dream for you...",
        "Oh, another unrealistic goal? Interesting.",
        "I see delusion is strong with this one.",
        "Reality check incoming...",
        "Time to lower those expectations."
      ];
      
      const botResponse = {
        id: Date.now() + 1,
        text: responses[Math.floor(Math.random() * responses.length)],
        sender: 'bot',
        timestamp: new Date()
      };
      setChatHistory(prev => [...prev, botResponse]);
      
      // Set the message for voice generation
      setUserInput(message);
    }, 1500);
  };

  const clearChat = () => {
    setChatHistory([]);
  };

  const randomVoice = () => {
    const randomIndex = Math.floor(Math.random() * voices.length);
    setSelectedVoice(voices[randomIndex]);
  };

  return (
    <div className="min-h-screen py-8" style={{ background: 'var(--bg)', color: 'var(--text)' }}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Page Title */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
            Voice Demotivation Studio
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Transform your thoughts into crushing reality checks with AI-powered celebrity voices
          </p>
        </div>

        {/* Input Mode Toggle */}
        <div className="flex justify-center mb-8">
          <div className="rounded-xl p-2 shadow-lg" style={{ background: 'var(--surface)', border: '1px solid var(--border)' }}>
            {['typing', 'voice', 'chat'].map((mode) => (
              <button
                key={mode}
                onClick={() => setInputMode(mode)}
                className={`px-6 py-3 rounded-lg font-medium transition-all duration-200 ${
                  inputMode === mode
                    ? 'bg-indigo-600 text-white shadow-md'
                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                }`}
              >
                {mode === 'typing' && '‚úçÔ∏è Type'}
                {mode === 'voice' && 'üé§ Voice'}
                {mode === 'chat' && 'üí¨ Chat'}
              </button>
            ))}
          </div>
        </div>

        {/* Main Content Grid */}
        <div className={`grid gap-8 ${inputMode === 'chat' ? 'lg:grid-cols-2' : 'lg:grid-cols-1'}`}>
          
          {/* Chat History (only visible in chat mode) */}
          {inputMode === 'chat' && (
            <div style={{ borderRadius: 16, boxShadow: 'var(--card-shadow)', border: '1px solid var(--border)', overflow: 'hidden' }}>
              <div style={{ padding: '16px', borderBottom: '1px solid var(--border)', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <h3 style={{ fontWeight: 600, color: 'var(--text)' }}>Chat History</h3>
                <button
                  onClick={clearChat}
                  className="px-3 py-1 text-sm rounded-md"
                  style={{ color: 'var(--muted-text)', border: '1px solid var(--border)', background: 'transparent' }}
                >
                  Clear
                </button>
              </div>
              <div style={{ height: 384, overflowY: 'auto', padding: 24 }}>
                {chatHistory.length === 0 ? (
                  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', color: 'var(--muted-text)' }}>
                    Start a conversation to see your chat history
                  </div>
                ) : (
                  <div className="space-y-4">
                    {chatHistory.map(msg => (
                      <div
                        key={msg.id}
                        className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div style={{ maxWidth: 'min(80%, 360px)', padding: '10px 16px', borderRadius: 20, background: msg.sender === 'user' ? 'linear-gradient(135deg,var(--primary),var(--accent))' : 'var(--surface)', color: msg.sender === 'user' ? '#fff' : 'var(--text)' }}>
                          {msg.text}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Main Input Panel */}
          <div style={{ borderRadius: 16, boxShadow: 'var(--card-shadow)', border: '1px solid var(--border)', padding: 32, background: 'var(--surface)' }}>
            {/* Input Section */}
            {inputMode === 'typing' && (
              <div className="mb-8">
                <label className="block text-lg font-semibold mb-4" style={{ color: 'var(--text)' }}>
                  Enter your message
                </label>
                <textarea
                  value={userInput}
                  onChange={(e) => setUserInput(e.target.value)}
                  placeholder="Type something optimistic that needs crushing..."
                  className="w-full h-32 px-4 py-3 rounded-xl resize-none transition-colors"
                  style={{ border: '1px solid var(--border)', background: 'var(--bg)', color: 'var(--text)' }}
                />
              </div>
            )}

            {inputMode === 'voice' && (
              <div className="mb-8 text-center">
                <div style={{ borderRadius: 12, padding: 24, marginBottom: 16, border: '1px solid var(--border)', background: isRecording ? 'rgba(248,113,113,0.04)' : 'var(--surface)' }}>
                  <div style={{ fontSize: 48, marginBottom: 12, color: isRecording ? 'rgba(248,113,113,1)' : 'rgba(148,163,184,1)' }}>
                    üé§
                  </div>
                  <p style={{ fontSize: 18, marginBottom: 12, color: isRecording ? 'rgba(248,113,113,0.9)' : 'var(--muted-text)' }}>
                    {isRecording ? 'Listening... Speak your delusions' : 'Click to start voice input'}
                  </p>
                  <button
                    onClick={startVoiceInput}
                    disabled={isRecording}
                    className="px-6 py-3 rounded-xl font-semibold"
                    style={isRecording ? { background: 'var(--border)', color: 'var(--muted-text)', cursor: 'not-allowed' } : { background: 'linear-gradient(135deg,var(--primary),var(--accent))', color: '#fff' }}
                  >
                    {isRecording ? 'Recording...' : 'Start Recording'}
                  </button>
                </div>
                {userInput && (
                  <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 text-left">
                    <strong>Transcribed:</strong> {userInput}
                  </div>
                )}
              </div>
            )}

            {inputMode === 'chat' && (
              <div className="mb-8">
                <div className="flex gap-3">
                  <input
                    type="text"
                    value={userInput}
                    onChange={(e) => setUserInput(e.target.value)}
                    placeholder="Type your message..."
                    className="flex-1 px-4 py-3 border-2 border-gray-300 rounded-full focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        sendChatMessage(userInput);
                        setUserInput('');
                      }
                    }}
                  />
                  <button
                    onClick={() => {
                      sendChatMessage(userInput);
                      setUserInput('');
                    }}
                    className="bg-indigo-600 hover:bg-indigo-700 text-white rounded-full w-12 h-12 flex items-center justify-center transition-colors"
                  >
                    ‚û§
                  </button>
                </div>
              </div>
            )}

            {/* Voice Selection */}
            <div className="mb-8">
              <label className="block text-lg font-semibold text-gray-900 mb-4">
                Choose your demotivator
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                {voices.map((voice, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedVoice(voice)}
                    className={`p-4 rounded-xl text-left transition-all`}
                    style={selectedVoice?.name === voice.name ? { border: '1px solid rgba(99,102,241,0.6)', background: 'rgba(99,102,241,0.06)', color: 'var(--text)' } : { border: '1px solid var(--border)', background: 'var(--surface)', color: 'var(--text)' }}
                  >
                    <div className={`font-semibold mb-1 ${
                      selectedVoice?.name === voice.name ? 'text-indigo-700' : 'text-gray-900'
                    }`}>
                      {voice.name}
                    </div>
                    <div className="text-sm text-gray-600">
                      {voice.description}
                    </div>
                  </button>
                ))}
              </div>
              <button
                onClick={randomVoice}
                className="w-full p-3 border-2 border-dashed border-indigo-400 text-indigo-600 rounded-xl font-semibold hover:bg-indigo-50 transition-colors"
              >
                üé≤ Surprise me with a random voice
              </button>
            </div>

            {/* Generate Button */}
            <button
              onClick={generateMessage}
              disabled={loading || !userInput.trim() || !selectedVoice}
              className="w-full py-4 rounded-xl text-lg font-bold transition-all"
              style={(loading || !userInput.trim() || !selectedVoice) ? { background: 'var(--border)', color: 'var(--muted-text)', cursor: 'not-allowed' } : { background: 'linear-gradient(135deg, #ef4444, #b91c1c)', color: '#fff', boxShadow: '0 10px 30px rgba(0,0,0,0.12)' }}
            >
              {loading ? 'Crushing your dreams...' : 'üíÄ Generate Demotivation'}
            </button>

            {/* Error Display */}
            {error && (
              <div style={{ marginTop: 16, background: 'rgba(248,113,113,0.05)', border: '1px solid rgba(248,113,113,0.2)', color: 'var(--text)', padding: '12px', borderRadius: 12 }}>
                {error}
              </div>
            )}

            {/* Generated Message Display */}
            {generatedMessage && (
              <div style={{ marginTop: 16, background: 'linear-gradient(135deg, rgba(248,113,113,0.03), rgba(239,68,68,0.03))', border: '1px solid rgba(248,113,113,0.16)', borderRadius: 12, padding: 16 }}>
                <h3 style={{ fontSize: 18, fontWeight: 700, color: 'var(--text)', marginBottom: 8 }}>
                  Your Demotivation Message:
                </h3>
                <p style={{ color: 'var(--text)', fontStyle: 'italic', marginBottom: 12 }}>
                  "{generatedMessage}"
                </p>
                <div style={{ display: 'flex', gap: 12 }}>
                  <button
                    onClick={speakMessage}
                    disabled={speaking}
                    className="px-4 py-2 rounded-lg font-semibold"
                    style={speaking ? { background: 'var(--border)', color: 'var(--muted-text)', cursor: 'not-allowed' } : { background: 'linear-gradient(135deg,#10b981,#059669)', color: '#fff' }}
                  >
                    {speaking ? 'üîä Speaking...' : 'üîä Play Voice'}
                  </button>
                  <button
                    onClick={shareMessage}
                    className="px-4 py-2 rounded-lg font-semibold"
                    style={{ background: 'linear-gradient(135deg,#3b82f6,#1e40af)', color: '#fff' }}
                  >
                    üì§ Share
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VoiceGenerator;